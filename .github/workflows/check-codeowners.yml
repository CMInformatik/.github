name: PR von Codeowner reviewed

on:
  pull_request_review:
    types: 
      - submitted
      - edited
      - dismissed

jobs:
  codeowners:
    name: Check codeowners
    runs-on: ubuntu-latest
    steps:
      - name: Check codeowners approval
        id: cocheck
        env:
          GITHUB_TOKEN: ${{ secrets.CMI_GITHUB_TOKEN }}
          PR: ${{ github.event.pull_request.number }}
        run: |
          function isApproved {
          for reviewer in "${approver[@]}"; do
              echo "Try approval of $reviewer"
              [[ "$reviewer" =~ 'app/' ]] && reviewer="${reviewer:4}"
              [[ "$2" =~ "${reviewer}" ]] && echo "Approved by: $reviewer" && return 0
          done
              echo "* Review of \`$1\` requires one of \`$2\`" >> missingCos
              canContinue='false'
          }
          
          approver=()
          mapfile -t approver < <(gh pr view $PR --json reviews -q '.reviews[] | select(.state == "APPROVED") | .author["login"]' --repo $GITHUB_REPOSITORY)
          
          [[ ${#approver[@]} > 0 ]] || ( echo "At least one approver is required" && exit 1) 
          
          canContinue='true'
          isApproved "any" "${{ vars.CO_GENERAL }}"
                    
          echo "MISSING_COS<<EOF" >> $GITHUB_ENV
          
          echo "CAN_CONTINUE=$canContinue" >> "$GITHUB_OUTPUT"
          echo "Output: ${canContinue}"

          if [[ "$canContinue" == 'true' ]];then
            echo "No futher approvals required"
            echo "No further" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            exit 0
          fi

          echo "Some files require further approvals.."
          echo "$(cat ./missingCos)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          exit 1
          
      - name: Decorate PR
        if: ( success() || failure() ) && steps.cocheck.outputs.CAN_CONTINUE == 'false'
        uses: thollander/actions-comment-pull-request@v2.4.2
        with:
          message: |
            ${{ env.MISSING_COS }}
          comment_tag: codeowner_checklist
          mode: recreate
          create_if_not_exists: true
          GITHUB_TOKEN: ${{ secrets.CMI_GITHUBTOKEN_RW }}
